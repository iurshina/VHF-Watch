import glob
import os
import re
import shutil
import tempfile
import wave
from subprocess import CalledProcessError, run

import numpy as np
import webrtcvad
import whisper

from vhf_watch.logger_config import setup_logger

logger = setup_logger(name=__name__)

model = whisper.load_model("base")
vad = webrtcvad.Vad(3)  # aggressiveness: 0 (very loose) to 3 (very strict)


def sanitize_kiwi_host(kiwi_host: str) -> str:
    # Remove protocol and trailing paths like /stream
    host = re.sub(r"^https?://", "", kiwi_host)
    host = host.split("/")[0]
    return host


def capture_audio_chunk(kiwi_host: str, chunk_duration: int) -> str:
    kiwi_host = sanitize_kiwi_host(kiwi_host)
    logger.info(f"Connecting to KiwiSDR: {kiwi_host}")

    with tempfile.TemporaryDirectory() as tmp_dir:
        kiwirecorder_cmd = [
            "python3",
            "kiwiclient/kiwirecorder.py",
            "-s",
            kiwi_host.split(":")[0],
            "-p",
            kiwi_host.split(":")[1] if ":" in kiwi_host else "8073",
            "-f",
            "156.800",  # marine VHF radio frequency
            "-m",
            "nbfm",
            # "-g", "50",
            "-L",
            "0",
            "-r",
            "16000",  # resample
            # "-H", "3000",
            "--dir",
            tmp_dir,
            "--station",
            "vhf_watch",
            "--tlimit",
            str(chunk_duration),
        ]

        try:
            run(kiwirecorder_cmd, stdout=None, stderr=None, check=True)
            # Look for the output wav file
            matches = glob.glob(os.path.join(tmp_dir, "*.wav"))
            if matches:
                src_path = matches[0]
                with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as dst:
                    shutil.copyfile(src_path, dst.name)
                    return dst.name
            else:
                logger.error("No WAV file generated by kiwirecorder.py")
                return ""
        except CalledProcessError:
            logger.error(f"kiwirecorder.py error while capturing from {kiwi_host}")
            return ""
        except Exception:
            logger.error("Failed to capture audio chunk", exc_info=True)
            return ""


def is_audio_active(wav_path: str, threshold_db: float = -45.0) -> bool:
    try:
        with wave.open(wav_path, "rb") as wf:
            frames = wf.readframes(wf.getnframes())
            samples = np.frombuffer(frames, dtype=np.int16).astype(np.float32)
            if len(samples) == 0:
                return False
            rms = np.sqrt(np.mean(samples**2))
            db = 20 * np.log10(rms / 32768.0 + 1e-6)
            logger.debug(f"RMS dB: {db:.2f}")
            return db > threshold_db
    except Exception:
        logger.error("Failed to analyze audio activity", exc_info=True)
        return False


def is_speech_present(wav_path: str) -> bool:
    try:
        with wave.open(wav_path, "rb") as wf:
            assert wf.getframerate() == 16000
            assert wf.getnchannels() == 1
            assert wf.getsampwidth() == 2

            frame_duration = 30  # ms
            frame_size = int(16000 * frame_duration / 1000) * 2  # bytes
            speech_frames = 0

            while True:
                frame = wf.readframes(frame_size // 2)
                if len(frame) < frame_size:
                    break

                frame_np = np.frombuffer(frame, dtype=np.int16)
                energy = np.sqrt(np.mean(frame_np.astype(np.float32) ** 2))

                if energy < 200:
                    continue  # skip frames with very low energy

                if vad.is_speech(frame, 16000):
                    speech_frames += 1
                    if speech_frames > 3:
                        return True
            return False
    except Exception:
        logger.error("VAD analysis failed", exc_info=True)
        return False


def transcribe_chunk(wav_path: str) -> str:
    try:
        result = model.transcribe(wav_path)
        return result.get("text", "")
    except Exception:
        logger.error("Whisper transcription failed", exc_info=True)
        return ""
